# Part 1

# Part of verbose_logging.
# It transports session and user data from the controller to the logger.
#
# Based on http://www.simpltry.com/2008/05/09/enhanced-rails-logging/
#
# This module gets included into ActionController::Base to gather
# the information we need about the user and the request. The
# Logger doesn't have all that info in scope.
module DataToThread

  # Called when this module is included into another module or class. Adds
  # the assign_data_to_thread before filter.
  def self.included(base)
    base.prepend_before_filter :assign_data_to_thread
  end

  # Adds the session_label to the Thread.
  def assign_data_to_thread
    # it could also be ActionController::Base.session_options[:key], check
    # http://stackoverflow.com/questions/1001597/accessing-the-session-key-cookie-name-from-anywhere-in-rails
    session_id = $SESSION_ID || cookies[ActionController::Base.session_options[:session_key]] || "NOSESSION"
    login = logged_in? ? current_user.login : "NOLOGIN"
    Thread.current[:action_controller_session_id] = "#{login}:#{session_id}"
  end

  # This the method that composes the user:session_id label for the log line
  def session_label
    # see http://stackoverflow.com/questions/1001597/accessing-the-session-key-cookie-name-from-anywhere-in-rails
    session_id = cookies[ActionController::Base.session_options[:session_key]] || "NOSESSION"
    login = logged_in? ? current_user.login : "NOLOGIN"
    "#{login}:#{session_id}"
  end
end

# Part 2

# Monkey patched by VerboseLogging to add the information coming from the
# controller at the beginning of every
# line generated by logger.* or RAILS_DEFAULT_LOGGER.*
#
# The patched method is BufferedLogger#add
# The original source is at
# /usr/lib/ruby/gems/1.8/gems/activesupport-2.3.4/lib/active_support/buffered_logger.rb
module ActiveSupport
  # Monkey patched by VerboseLogging to add the information coming from the
  # controller at the beginning of every
  # line generated by logger.* or RAILS_DEFAULT_LOGGER.*
  class BufferedLogger

    # The constants are defined at the beginning of
    # /usr/lib/ruby/gems/1.8/gems/activesupport-2.3.4/lib/active_support/buffered_logger.rb
    # Their integer values must match the positions in the array. Using an hash would
    # have been more portable across Rails releases but maybe less performant.
    LEVEL_STRING = [ "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "UNKNOWN" ]

    # Generates the log message.
    def add(severity, message = nil, progname = nil, &block)
      return if @level > severity
      message = (message || (block && block.call) || progname).to_s

      # Don't use DateTime, it's very slow because it uses Date for the day/month/year part
      # and Date is slow! http://www.webair.it/blog/2009/03/05/ruby-ancora-sulle-prestazioni/
      time = Time.now.getutc.strftime("%Y%m%d%H%M%S")
      if $SESSION_ID
        session_label = "NOLOGIN:" + $SESSION_ID + ":"
      else
        session_label = Thread.current[:action_controller_session_id] || "NOLOGIN:NOSESSION"
      end
      prefix = %(#{time}:#{LEVEL_STRING[severity]}:#{$$})

      # Injecting the extra log info and handling multiline log messages
      # You may have to use \r\n or \r in the gsub if you run on Windows or on a Mac
      # (it's an untested guess)
      long_prefix = %(#{prefix}:#{session_label})
      message = %(#{long_prefix}:#{message.gsub("\n", "\n#{long_prefix}:")})
      # Use this instead if you don't want multiline support
      #message = long_prefix << message

      message = "#{message}\n" unless message[-1] == ?\n
      buffer << message
      auto_flush
      message
    end

  end
end

# Part 3

# Monkey patched by VerboseLogging to add the extra information to the
# Processing and Parameters lines at the beginning of each request.
#
# The patched methods are log_processing_for_request_id and
# log_processing_for_parameters.
# Code like http://www.simpltry.com/2008/05/09/enhanced-rails-logging/
# doesn't work for me.
# Furthermore this code keeps changing in about every Rails version so I better
# have a look at it.
#
# Original code at /usr/lib/ruby/gems/1.8/gems/actionpack-2.3.4/lib/action_controller/base.rb
module ActionController

  # Monkey patched by VerboseLogging to add the extra information to the
  # Processing and Parameters lines at the beginning of each request.
  class Base

    # Import the code from Part 1, self.included and assign_data_to_thread are always neeeded.
    include DataToThread

    # The following methods are needed for the reason explained in the
    # comment inside the add method in Part 2.
    private

    # Monkey patched method. Adds session_label at the beginning of the line
    def log_processing_for_request_id
      assign_data_to_thread
      request_id = %(  Processing #{self.class.name}\##{action_name})
      request_id = %(#{request_id} to #{params[:format]}) if params[:format]
      request_id = %(#{request_id} (for #{request_origin}) [#{request.method.to_s.upcase}])
      logger.info request_id
    end

    # Monkey patched method. Adds session_label at the beginning of the line
    def log_processing_for_parameters
      parameters = respond_to?(:filter_parameters) ? filter_parameters(params) : params.dup
      parameters = parameters.except!(:controller, :action, :format, :_method)
      logger.info %(  Parameters: #{parameters.inspect}) unless parameters.empty?
    end

  end
end

